df <- diamonds %>%
filter(price > 1000) %>%
select(price, carat, cut) %>%
arrange(-price) %>%
mutate(exp = price/carat) %>%
group_by(cut) %>%
summarise(funs(means), price)
df
df <- diamonds %>%
filter(price > 1000) %>%
select(price, carat, cut) %>%
arrange(-price) %>%
mutate(exp = price/carat) %>%
group_by(cut) %>%
summarise(means)
df <- diamonds %>%
filter(price > 1000) %>%
select(price, carat, cut) %>%
arrange(-price) %>%
mutate(exp = price/carat) %>%
group_by(cut) %>%
summarise(mean)
df <- diamonds %>%
filter(price > 1000) %>%
select(price, carat, cut) %>%
arrange(-price) %>%
mutate(exp = price/carat) %>%
group_by(cut) %>%
summarise_each(mean)
df <- diamonds %>%
filter(price > 1000) %>%
select(price, carat, cut) %>%
arrange(-price) %>%
mutate(exp = price/carat) %>%
group_by(cut) %>%
summarise_each(funs(mean))
df
str(df)
df <- diamonds %>%
filter(price > 1000) %>%
select(price, carat, cut) %>%
arrange(-price) %>%
mutate(exp = price/carat) %>%
group_by(cut) %>%
summarise(funs(mean))
df
df <- diamonds %>%
filter(price > 1000) %>%
select(price, carat, cut) %>%
arrange(-price) %>%
mutate(exp = price/carat) %>%
group_by(cut) %>%
summarise(mean)
df
df <- diamonds %>%
filter(price > 1000) %>%
select(price, carat, cut) %>%
arrange(-price) %>%
mutate(exp = price/carat) %>%
group_by(cut) %>%
tally()
df
df <- diamonds %>%
filter(price > 1000) %>%
select(price, carat, cut) %>%
arrange(-price) %>%
mutate(exp = price/carat) %>%
group_by(cut) %>%
summarise(count)
df
df <- diamonds %>%
filter(price > 1000) %>%
select(price, carat, cut) %>%
arrange(-price) %>%
mutate(exp = price/carat) %>%
group_by(cut) %>%
summarize(num_rows = n())
df
df <- diamonds %>%
filter(price > 1000) %>%
select(price, carat, cut) %>%
arrange(-price) %>%
mutate(exp = price/carat) %>%
group_by(cut) %>%
summarise(num_rows = n(),
mean_value = mean)
df
df <- diamonds %>%
filter(price > 1000) %>%
select(price, carat, cut) %>%
arrange(-price) %>%
mutate(exp = price/carat) %>%
group_by(cut) %>%
summarise(num_rows = n(),
mean)
df
df <- diamonds %>%
filter(price > 1000) %>%
select(price, carat, cut) %>%
arrange(-price) %>%
mutate(exp = price/carat) %>%
group_by(cut) %>%
summarise(funs(num_rows = n(), mean = mean)
df
df <- diamonds %>%
filter(price > 1000) %>%
select(price, carat, cut) %>%
arrange(-price) %>%
mutate(exp = price/carat) %>%
group_by(cut) %>%
summarise(funs(num_rows = n(), mean = mean))
df
df <- diamonds %>%
filter(price > 1000) %>%
select(price, carat, cut) %>%
arrange(-price) %>%
mutate(exp = price/carat) %>%
group_by(cut) %>%
summarise(funs(num_rows = n(), mean = mean()))
df
ggplot(diamonds) + aes(clarity) +
geom_bar()
ggplot(diamonds) + aes(clarity) +
geom_bar() + scale_x_discrete()
ggplot(diamonds) + aes(clarity) +
geom_bar() +
scale_x_discrete(limits = position)
ggplot(diamonds) + aes(clarity) +
geom_bar() +
scale_x_discrete(limits = "position")
ggplot(diamonds) + aes(clarity) +
geom_bar() +
scale_x_discrete(limits = positions)
ggplot(diamonds) + aes(reorder(clarity, )) +
geom_bar()
ggplot(diamonds) + aes(reorder(clarity, count)) +
geom_bar()
ggplot(diamonds) + aes(reordersize(clarity)) +
geom_bar()
reorder_size <- function(x) {
factor(x, levels = names(sort(table(x))))
}
ggplot(diamonds) + aes(reordersize(clarity)) +
geom_bar()
ggplot(diamonds) + aes(reorder_size(clarity)) +
geom_bar()
table(diamonds$clarity)
sort(table(diamonds$clarity))
?factor
?sort
table(diamonds)
?table
library(dplyr)
library(ggplot)
library(jsonlite)
data <- diamonds %>%
sample_n(1000)
s <- summary(data$price)
df <- as.data.frame(s)
str(s)
table(s)
str(s)
df <- as.data.frame.matrix(s)
df <- as.data.frame.matrix(s)
is.matrix(s)
df <- as.data.frame.table(s)
is.table(s)
?as.data.frame
?table
dimnames(s)
str(s)
table(s)
s
s.names
rownames(s)
colimnnames(s)
columnnames(s)
colnnames(s)
colnames(s)
dimnames(s)
s <- summary(data$price)
str(s)
names(s)
df <- as.data.frame.table(s, row.names = names )
df <- as.data.frame.table(s, sep = names)
?as.data.frame
df <- as.data.frame.table(x = s, row.names = s$names)
df <- as.data.frame.table(x = s, row.names = s.names)
df <- as.data.frame.table(x = s, row.names = names(s))
df <- as.data.frame(x = s, row.names = names(s))
is.vector(names(s))
df <- data.frame(x = s, row.names = names(s))
table(s)
names(s)
is.vector(table(s))
is.vector(s)
is.matrix(s)
str(s)
is.table(s)
str(s)
s
names(s)
b = table(s)
value <- table(s)
names <- names(s)
df <- data.frame (names, value)
df
value <- table(s)
names <- names(s)
df <- data.frame (names, value)
df
value <- as.vector(table(s))
value
value <- as.vector(table(s))
value <- table(s)
value
s
do.call(cbind, lapply(data, summary))
do.call(cbind, lapply(data$price, summary))
data.frame(unclass(summary(data$price)), check.names = FALSE, stringsAsFactors = FALSE)
data.frame(unclass(s), check.names = FALSE, stringsAsFactors = FALSE)
data.frame(unclass(s))
library(bigvis)
data(movies)
str(movies)
summary(movies$budget)
x <- runif(2e5)
x <- runif(2e3)
y <- runif(2e3)
system.time(plot(x, y))
x <- runif(2e4)
y <- runif(2e4)
system.time(plot(x, y))
?runif
system.time(plot(x, y))
x <- runif(2e5)
y <- runif(2e5)
system.time(plot(x, y))
?normal distribution
install.packages("rvest")
library(rvest)
setwd('Dropbox/github/intro-R-data-science/')
library(rvest)
pg <- html('MonthWiseMarketArrivals.html')
pg <- read_html('MonthWiseMarketArrivals.html')
setwd('Dropbox/github/intro-R-data-science/onion')
pg <- read_html('MonthWiseMarketArrivals.html')
setwd('Dropbox/github/intro-R-data-science/onion')
setwd('Dropbox/github/intro-R-data-science/onion')
setwd('Dropbox/github/intro-R-data-science/onion')
getwd()
setwd('Dropbox/github/intro-R-data-science/onion')
setwd('onion/')
pg <- read_html('MonthWiseMarketArrivals.html')
pg.out <- read_html('MonthWiseMarketArrivals.html')
pg.table <-  pg.out %>%
html_node("#dnn_ctr974_MonthWiseMarketArrivals_GridView1")  %>%
html_table()
str(pg.table)
url <- "http://nhrdf.org/en-us/MonthWiseMarketArrivals"
pg.session <- html_session(url)
pg.form <- html_form(pg.session)[[1]]
crop <- 1
month <- 1
year <- 2015
market <- ""
pg.form <- html_form(pg.session)[[1]]
pg.form.filled <- set_values(pg.form,
"dnn$dnnLANG$selectCulture" = "en-US",
"dnn$ctr974$MonthWiseMarketArrivals$Market" = market,
"dnn$ctr974$MonthWiseMarketArrivals$MonthName" = month,
"dnn$ctr974$MonthWiseMarketArrivals$Year" = year,
"dnn$ctr974$MonthWiseMarketArrivals$Crop" = crop)
pg.submit <- submit_form(pg.session, pg.form.filled,
submit = 'dnn$ctr974$MonthWiseMarketArrivals$btnSearch'')
pg.out <- html(pg.submit)
pg.submit <- submit_form(pg.session, pg.form.filled,
submit = 'dnn$ctr974$MonthWiseMarketArrivals$btnSearch')
pg.out <- html(pg.submit)
pg.out <- read_html(pg.submit)
pg.table <-  pg.out %>%
html_node("#dnn_ctr974_MonthWiseMarketArrivals_GridView1")  %>%
html_table()
str(pg.table)
url <- "http://nhrdf.org/en-us/MonthWiseMarketArrivals"
pg.session <- html_session(url)
pg.form <- html_form(pg.session)[[1]]
crop <- 1
month <- "All"
year <- "All"
market <- "All"
pg.form <- html_form(pg.session)[[1]]
pg.form.filled <- set_values(pg.form,
"dnn$dnnLANG$selectCulture" = "en-US",
"dnn$ctr974$MonthWiseMarketArrivals$Market" = market,
"dnn$ctr974$MonthWiseMarketArrivals$MonthName" = month,
"dnn$ctr974$MonthWiseMarketArrivals$Year" = year,
"dnn$ctr974$MonthWiseMarketArrivals$Crop" = crop)
pg.submit <- submit_form(pg.session, pg.form.filled,
submit = 'dnn$ctr974$MonthWiseMarketArrivals$btnSearch')
pg.out <- read_html(pg.submit)
crop <- 1
month <- ""
year <- ""
market <- ""
pg.form <- html_form(pg.session)[[1]]
pg.form.filled <- set_values(pg.form,
"dnn$dnnLANG$selectCulture" = "en-US",
"dnn$ctr974$MonthWiseMarketArrivals$Market" = market,
"dnn$ctr974$MonthWiseMarketArrivals$MonthName" = month,
"dnn$ctr974$MonthWiseMarketArrivals$Year" = year,
"dnn$ctr974$MonthWiseMarketArrivals$Crop" = crop)
pg.submit <- submit_form(pg.session, pg.form.filled,
submit = 'dnn$ctr974$MonthWiseMarketArrivals$btnSearch')
crop <- 1
month <- ""
year <- "All"
market <- ""
pg.form <- html_form(pg.session)[[1]]
pg.form.filled <- set_values(pg.form,
"dnn$dnnLANG$selectCulture" = "en-US",
"dnn$ctr974$MonthWiseMarketArrivals$Market" = market,
"dnn$ctr974$MonthWiseMarketArrivals$MonthName" = month,
"dnn$ctr974$MonthWiseMarketArrivals$Year" = year,
"dnn$ctr974$MonthWiseMarketArrivals$Crop" = crop)
pg.submit <- submit_form(pg.session, pg.form.filled,
submit = 'dnn$ctr974$MonthWiseMarketArrivals$btnSearch')
pg.form <- html_form(pg.session)[[1]]
pg.form.filled <- set_values(pg.form,
"dnn$dnnLANG$selectCulture" = "en-US",
"dnn$ctr974$MonthWiseMarketArrivals$Market" = market,
"dnn$ctr974$MonthWiseMarketArrivals$MonthName" = month,
"dnn$ctr974$MonthWiseMarketArrivals$Year" = year,
"dnn$ctr974$MonthWiseMarketArrivals$Crop" = crop)
pg.submit <- submit_form(pg.session, pg.form.filled,
submit = 'dnn$ctr974$MonthWiseMarketArrivals$btnSearch')
pg.out <- read_html(pg.submit)
pg.table <-  pg.out %>%
html_node("#dnn_ctr974_MonthWiseMarketArrivals_GridView1")  %>%
html_table()
str(pg.table)
file <- paste("MonthWiseMarketArrivalsJan2016", as.character(month), as.character(year), ".csv", sep="")
write.csv(pg.table, file = file, quote = FALSE, row.names = FALSE)
file <- paste("MonthWiseMarketArrivals", as.character(month), as.character(year), ".csv", sep="")
write.csv(pg.table, file = file, quote = FALSE, row.names = FALSE)
sessionInfo()
sessionInfo()
version
install.packages("rvest")
library(rvest)
install.packages("lubridate")
?spread
library(tidyr)
?spread
?read.url
??read.url
library(dplyr)
library(stringr)
df.messy <- read.csv("data/cars.spec.raw.csv", stringsAsFactors = FALSE)
install.packages("forecast")
str(mtcars)
model <- lm(mpg ~ cyl, data = mtcars)
model$fitted.values
plot(model)
model <- lm(mpg ~ hp, data = mtcars)
model$fitted.values
plot(model)
library(ROCR)
demo(ROCR)
data <- read.csv('Dropbox/projects/PixelTrain/pixelTrain.csv', header = TRUE)
str(data)
# Reorder Movies names as factor by votes
data <- data %>% arrange(desc(votes))
data$movie <- reorder(data$movie, -data$votes)
levels(data$movie)
## Split the stages to individual observations
dataExp <- data %>% gather("stage", "n", 2:7)
dataExp <- dataExp %>% select(movie, votes, stage, n)
str(dataExp)
levels <- c("dream", "plan", "believe", "around", "doneit", "another")
dataExp$stage <- factor(dataExp$stage, levels = levels)
str(dataExp)
## Individual Votes
dataInd <- dataExp[rep(seq_len(nrow(dataExp)), dataExp$n), 1:3]
dataInd <- dataInd %>% arrange(desc(votes))
library(ggplot2)
library(dplyr)
library(tidyr)
data <- read.csv('Dropbox/projects/PixelTrain/pixelTrain.csv', header = TRUE)
str(data)
# Reorder Movies names as factor by votes
data <- data %>% arrange(desc(votes))
data$movie <- reorder(data$movie, -data$votes)
levels(data$movie)
## Split the stages to individual observations
dataExp <- data %>% gather("stage", "n", 2:7)
dataExp <- dataExp %>% select(movie, votes, stage, n)
str(dataExp)
levels <- c("dream", "plan", "believe", "around", "doneit", "another")
dataExp$stage <- factor(dataExp$stage, levels = levels)
str(dataExp)
## Individual Votes
dataInd <- dataExp[rep(seq_len(nrow(dataExp)), dataExp$n), 1:3]
dataInd <- dataInd %>% arrange(desc(votes))
## Star Plots
# par(bg = "black")
stars(data[,2:7], key.loc = c(-20, 20), scale = FALSE,
locations = NULL, len =1, radius = TRUE,
full = TRUE, labels = NULL,  draw.segments = TRUE)
## Plot Tree Maps
library(treemap)
treemap(data, index = c("movie"), vSize = "votes", type="value",
palette = "BuPu", algorithm = "squarified", sortID = "votes",
title = "Startup Movie Map")
treemap(data, index = c("movie"), vSize = "votes", type="value",
palette = "BuPu", algorithm = "squarified", sortID = "votes",
title = "Startup Movie Map")
t <- treemap(data, index = c("movie"), vSize = "votes", type="value",
palette = "BuPu", algorithm = "squarified", sortID = "votes",
title = "Startup Movie Map")
t
?"treemap"
plot(t)
treemap(dataExp, index = c("movie", "stage"), vSize = "n", vColor = "stage",
type="categorical", fontsize.labels=c(12,0), bg.labels = 50,
palette = "-BuPu", algorithm = "squarified", sortID = "n",
title = "Startup Movie Map", position.legend = "bottom")
View(data)
shiny::runApp('Dropbox/github/Denver_Housing/Shiny')
str(ACSData10)
install.packages("exploreR")
iris_qda <- qda(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, iris)
iris_qda <- lda(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, iris)
iris_qda <- qda(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, iris)
?/qda
??qda
library(MASS)
iris_qda <- qda(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, iris)
explore(iris_qda, iris, n=100000)
library(exploreR)
explore(iris_qda, iris, n=100000)
explore(iris_qda, iris, n=100000)
?exploreR
??exploreR
library(tourr)
example(tourr)
??tourr
f <- flea[, 1:6]
animate(f, grand_tour(), display_xy())
animate_scatmat(flea[, 1:6], grand_tour(2))
library(tourr)
f <- flea[, 1:6]
animate_scatmat(flea[, 1:6], grand_tour(2))
plot(flea[, 1:6])
animate_scatmat(flea[, 1:6], grand_tour(2))
animate(f, grand_tour(), display_xy())
str(flea)
animate(f, grand_tour(), display_xy())
install.packages("extrafont")
library(extrafont)
font_import("courier")
library(ggplot2)
qplot(1:10)+theme(text=element_text(family="courier"))
qplot(1:10)+theme(text=element_text(family="Menlo"))
library(ggplot2)
ggplot(diamonds) + aes(carat, price) + geom_point()
ggplot(diamonds) + aes(carat, price) + geom_point(alpha = 0.5)
ggplot(diamonds) + aes(carat, price) + geom_bin2d()
View(diamonds)
ggplot(diamonds) + aes(carat, price) + geom_bin2d(color = "grey")
ggplot(diamonds) + aes(carat, price) + geom_point(alpha = 0.5)
library(ggplot2)
ggplot(diamonds) + aes(carat, price) + geom_point(alpha = 0.5)
ggplot(diamonds) + aes(carat, price) + geom_bin2d(color = "grey")
ggplot(diamonds) + aes(carat, price) + geom_contour()
ggplot(diamonds) + aes(carat, price) + geom_contour(bins = 20)
ggplot(diamonds) + aes(carat, price) + geom_density2d()
ggplot(diamonds) + aes(carat, price, color = color) + geom_density2d()
ggplot(diamonds) + aes(carat, price, fill = color) + geom_bin2d(color = "grey")
ggplot(diamonds) + aes(carat, price, fill = color) + geom_bin2d(alpha = 0.5)
ggplot(diamonds) + aes(carat, price, fill = color) + geom_density2d()
ggplot(diamonds) + aes(carat, price, fill = color) + geom_bin2d(alpha = 0.5)
ggplot(diamonds) + aes(carat, price, fill = color) + geom_bin2d(alpha = 0.3)
ggplot(diamonds) + aes(carat, price, fill = color) + geom_bin2d(alpha = 0.3) + geom_point()
ggplot(diamonds) + aes(carat, price, fill = color) + geom_bin2d(alpha = 0.3) +
geom_point(alpha = 0.2)
devtools::install_github("hadley/tidyverse")
install.packages("devtools")
?group_by
??group_by
install.packages(dplyr)
install.packages('dplyr")
install.packages("dplyr")
getwd()
setwd('Dropbox/github/machine-learning/onion')
setwd('~Users/amitkaps/Dropbox/github/machine-learning/onion')
setwd()
df <- read.csv('MonthWiseMarketArrivals_Clean.csv')
str(df)
df$date = as.Date(as.character(df$date), "%Y-%m-%d")
head(df)
getwd()
setwd("Dropbox/github/vis/")
getwd()
library(ggplot2)
library(gganimate)
devtools::install_github("dgrtwo/gganimate")
money <- read.csv(money.csv)
money <- read.csv(money.csv)
money <- read.csv('money.csv')
money <- read.csv('data/money.csv')
head(money)
